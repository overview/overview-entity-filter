// Generated by CoffeeScript 1.9.2
var BloomFilterTokenSet, TokenSet, bf, fs,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

fs = require('fs');

bf = require('overview-js-bloom-filter');

TokenSet = require('./TokenSet');

module.exports = BloomFilterTokenSet = (function(superClass) {
  extend(BloomFilterTokenSet, superClass);

  function BloomFilterTokenSet(bloomFilter1, maxNgramSize) {
    this.bloomFilter = bloomFilter1;
    BloomFilterTokenSet.__super__.constructor.call(this, maxNgramSize);
  }

  BloomFilterTokenSet.prototype.test = function(token, start, end) {
    return this.bloomFilter.test(token, start, end);
  };

  return BloomFilterTokenSet;

})(TokenSet);

BloomFilterTokenSet.writeSync = function(path, m, k, tokens) {
  var bloomFilter, i, len, token;
  bloomFilter = new bf.BloomFilter(m, k);
  for (i = 0, len = tokens.length; i < len; i++) {
    token = tokens[i];
    bloomFilter.add(token);
  }
  return fs.writeFileSync(path, bloomFilter.serialize());
};

BloomFilterTokenSet.loadSync = function(path, maxNgramSize) {
  var bloomFilter, buf;
  buf = fs.readFileSync(path);
  bloomFilter = bf.unserialize(buf);
  return new BloomFilterTokenSet(bloomFilter, maxNgramSize);
};

BloomFilterTokenSet.Factory = (function() {
  function Factory(path1, m1, k1, maxNgramSize1) {
    this.path = path1;
    this.m = m1;
    this.k = k1;
    this.maxNgramSize = maxNgramSize1;
  }

  Factory.prototype.loadSync = function() {
    return BloomFilterTokenSet.loadSync(this.path, this.maxNgramSize);
  };

  Factory.prototype.writeSync = function(tokens) {
    return BloomFilterTokenSet.writeSync(this.path, this.m, this.k, tokens);
  };

  return Factory;

})();
