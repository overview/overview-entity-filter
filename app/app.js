// Generated by CoffeeScript 1.9.2
var Filters, MaxNTokens, ProgressInterval, TokenBin, app, debug, express, morgan, oboe, tokenize;

debug = require('debug')('app');

express = require('express');

oboe = require('oboe');

morgan = require('morgan');

tokenize = require('overview-js-tokenizer').tokenize;

TokenBin = require('overview-js-token-bin');

app = express();

ProgressInterval = 500;

MaxNTokens = 500;

Filters = {};

(function() {
  var config, key, ref;
  ref = require('./token-sets');
  for (key in ref) {
    config = ref[key];
    debug("Loading " + key + "...");
    Filters[key] = config.loadSync();
  }
  return null;
})();

switch (process.env.NODE_ENV) {
  case 'test':
    break;
  case 'development':
    app.use(morgan('dev'));
    break;
  default:
    app.use(morgan('combined'));
}

app.get('/show', function(req, res) {
  return res.render('show.jade');
});

app.get('/metadata', function(req, res) {
  return res.status(204).header('Access-Control-Allow-Origin', '*').end();
});

app.get('/generate', function(req, res) {
  var finishResponse, includeFilters, interval, nDocuments, nDocumentsTotal, sendProgress, stream, t1, tokenBin;
  t1 = new Date();
  nDocuments = 0;
  nDocumentsTotal = 1;
  tokenBin = new TokenBin([]);
  res.header('Content-Type', 'application/json');
  res.write('[{"progress":0}');
  sendProgress = function() {
    return res.write(",{\"progress\":" + (nDocuments / nDocumentsTotal) + "}");
  };
  interval = setInterval(sendProgress, ProgressInterval);
  includeFilters = [Filters.geonames];
  stream = oboe({
    url: req.query.server + "/api/v1/document-sets/" + req.query.documentSetId + "/documents?fields=text&stream=true",
    headers: {
      Authorization: "Basic " + (new Buffer(req.query.apiToken + ":x-auth-token", 'ascii').toString('base64'))
    }
  });
  stream.node('pagination.total', function(total) {
    nDocumentsTotal = total;
    return oboe.drop;
  });
  stream.node('items.*', function(doc) {
    var filter, i, len, tokens;
    tokens = tokenize(doc.text);
    for (i = 0, len = includeFilters.length; i < len; i++) {
      filter = includeFilters[i];
      tokenBin.addTokens(filter.findTokensFromUnigrams(tokens));
    }
    nDocuments++;
    return oboe.drop;
  });
  finishResponse = function(json) {
    var e, ref;
    if (((ref = json.error) != null ? ref.thrown : void 0) != null) {
      e = json.error;
      json = {
        error: {
          thrown: e.thrown.toString(),
          statusCode: e.statusCode,
          body: e.body,
          jsonBody: e.jsonBody
        }
      };
    }
    clearInterval(interval);
    stream.abort();
    res.write(',');
    res.write(JSON.stringify(json));
    res.end(']');
    interval = void 0;
    return console.log("Request duration: " + (new Date() - t1));
  };
  stream.done(function() {
    var tokens;
    tokens = tokenBin.getTokensByFrequency().slice(0, MaxNTokens);
    return finishResponse({
      tokens: tokens
    });
  });
  req.on('close', function() {
    return finishResponse({
      error: 'request aborted'
    });
  });
  return stream.fail(function(err) {
    return finishResponse({
      error: err
    });
  });
});

app.use(express["static"]('public'));

module.exports = app;
