// Generated by CoffeeScript 1.9.2
var NativeSet, TextTokenSet, TokenSet, fs, zlib,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

fs = require('fs');

zlib = require('zlib');

TokenSet = require('./TokenSet');

NativeSet = require('js-native-ternary-buffer-tree');

module.exports = TextTokenSet = (function(superClass) {
  extend(TextTokenSet, superClass);

  function TextTokenSet(buffer, maxNgramSize) {
    TextTokenSet.__super__.constructor.call(this, maxNgramSize);
    this.set = new NativeSet(buffer);
  }

  TextTokenSet.prototype.test = function(token, start, end) {
    return this.set.contains(token.slice(start, end));
  };

  TextTokenSet.prototype.findTokensFromUnigrams = function(unigrams) {
    var unigramsBuffer;
    unigramsBuffer = new Buffer(unigrams.join(' ').toLowerCase(), 'utf-8');
    return this.set.findAllMatches(unigramsBuffer, this.maxNgramSize);
  };

  return TextTokenSet;

})(TokenSet);

TextTokenSet.loadSync = function(path, maxNgramSize) {
  var buffer;
  buffer = fs.readFileSync(path);
  if (/\.gz$/.test(path)) {
    buffer = zlib.gunzipSync(buffer);
  }
  return new TextTokenSet(buffer, maxNgramSize);
};

TextTokenSet.Factory = (function() {
  function Factory(path1, maxNgramSize1) {
    this.path = path1;
    this.maxNgramSize = maxNgramSize1;
  }

  Factory.prototype.loadSync = function() {
    return TextTokenSet.loadSync(this.path, this.maxNgramSize);
  };

  return Factory;

})();
